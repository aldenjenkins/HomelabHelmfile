environments:
  default:
    values:
      - "../values.yaml.gotmpl"

repositories:
  - name: prometheus-community
    url: "https://prometheus-community.github.io/helm-charts"
  - name: cloudflare-exporter
    url: "https://lablabs.github.io/cloudflare-exporter"

releases:
  - name: postgres-exporter
    namespace: default
    chart: prometheus-community/prometheus-postgres-exporter
    wait: true
    atomic: true
    values:
      - serviceMonitor:
          enabled: true
        config:
          datasource:
            host: {{ .Values.network.postgres.host }}
            password: {{ .Values.network.postgres.password }}
            database: postgres
  - name: mysqld-exporter
    namespace: default
    chart: prometheus-community/prometheus-mysql-exporter
    wait: true
    atomic: true
    values:
      - serviceMonitor:
          enabled: true
        mysql:
          host: {{ .Values.network.mysql.host }}
          pass: {{ .Values.network.mysql.password }}
        collectors:
          auto_increment.columns: true
          binlog_size: true
          engine_innodb_status: true
          engine_tokudb_status: true
          global_status: true
          global_variables: true
          info_schema.clientstats: true
          info_schema.innodb_metrics: true
          info_schema.innodb_tablespaces: true
          info_schema.innodb_cmp: true
          info_schema.innodb_cmpmem: true
          info_schema.processlist: true
          info_schema.processlist.min_time: 0
          info_schema.query_response_time: true
          info_schema.tables: true
          info_schema.tables.databases: '*'
          info_schema.tablestats: true
          info_schema.schemastats: true
          info_schema.userstats: true
          perf_schema.eventsstatements: true
          perf_schema.eventsstatements.digest_text_limit: 120
          perf_schema.eventsstatements.limit: 250
          perf_schema.eventsstatements.timelimit: 86400
          perf_schema.eventswaits: true
          perf_schema.file_events: true
          perf_schema.file_instances: true
          perf_schema.indexiowaits: true
          perf_schema.tableiowaits: true
          perf_schema.tablelocks: true
          perf_schema.replication_group_member_stats: true
          slave_status: true
          slave_hosts: true
          heartbeat: false
          heartbeat.database: heartbeat
          heartbeat.table: heartbeat
  - name: mikrotik-exporter
    namespace: default
    version: "0.0.3"
    chart: "charts/mikrotik-exporter"
    wait: true
    atomic: true
    values:
      - address: {{ .Values.network.mikrotik.address }}
        username: {{ .Values.network.mikrotik.username }}
        password: {{ .Values.network.mikrotik.password }}
  - name: cloudflare-exporter
    namespace: default
    version: "0.0.3"
    chart: "cloudflare-exporter/cloudflare-exporter"
    wait: true
    atomic: true
    values:
      - env:
        - name: CF_API_EMAIL
          value: {{ .Values.tls.cloudflare.email }}
        - name: CF_API_KEY
          value: {{ .Values.tls.cloudflare.api_key }}
  - name: prometheus-stack
    namespace: default
    labels:
      type: prometheus-stack
    chart: prometheus-community/kube-prometheus-stack
    needs:
      - default/mikrotik-exporter
      - default/cloudflare-exporter
    atomic: true
    values:
      - kubeControllerManager:
          enabled: false
        kubeEtcd:
          enabled: false
        kubeProxy:
          enabled: false
        kubeScheduler:
          enabled: false
        prometheus-node-exporter:
          hostRootFsMount: false
        grafana:
          plugins:
            - natel-discrete-panel
            - grafana-clock-panel
            - grafana-worldmap-panel
          grafana.ini:
            users:
              allow_sign_up: "false"
              auto_assign_org: "true"
              auto_assign_org_role: "Editor"
            auth:
              proxy:
                enabled: "true"
                header_name: "Cf-Access-Authenticated-User-Email"
                header_property: "email"
                auto_sign_up: "true"
          dashboardProviders:
            dashboardproviders.yaml:
              apiVersion: 1
              providers:
                - name: "default"
                  orgId: 1
                  folder: ""
                  type: file
                  disableDeletion: false
                  editable: true
                  options:
                    path: /var/lib/grafana/dashboards/default
          dashboards:
            default:
              # netdata:
              #   url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/prometheus-operator/grafana-dashboards/netdata.json
              #   datasource: Prometheus
              nginx-dashboard:
                url: https://grafana.com/api/dashboards/9614/revisions/1/download
                datasource: Prometheus
              mikrotik:
                url: https://grafana.com/api/dashboards/12055/revisions/1/download
                datasource: Prometheus
              node-exporter-server-metrics:
                revision: 8
                gnetId: 405
                datasource: Prometheus
              node-exporter-full:
                revision: 20
                gnetId: 1860
                datasource: Prometheus
              netdata:
                revision: 1
                gnetId: 7107
                datasource: Prometheus
              mysql:
                url: "https://raw.githubusercontent.com/percona/grafana-dashboards/master/dashboards/MySQL_Overview.json"
                datasource: Prometheus
              postgres:
                url: "https://grafana.com/api/dashboards/9628/revisions/7/download"
                datasource: Prometheus
          ingress:
            enabled: true
            annotations:
              kubernetes.io/ingress.class: nginx
              kubernetes.io/tls-acme: "true"
            hosts:
              - grafana.kube.local
            paths:
              - "/"
            pathType: Prefix
            tls:
              - secretName: default-cert-tls
                hosts:
                  - grafana.kube.local
        prometheus:
          prometheusSpec:
            retention: 30d
            podMonitorSelectorNilUsesHelmValues: false
            serviceMonitorSelectorNilUsesHelmValues: false
            enableAdminAPI: true
            additionalScrapeConfigs:
              - job_name: "netdata-scrape"
                metrics_path: "/api/v1/allmetrics"
                scrape_interval: 10s
                params:
                  # format: prometheus | prometheus_all_hosts
                  # You can use `prometheus_all_hosts` if you want Prometheus to set the `instance` to your hostname instead of IP
                  format: [prometheus_all_hosts]
                honor_labels: true
                static_configs:
                  - targets:
                      - netdata:19999
              - job_name: mikrotik-scrape
                static_configs:
                  - targets:
                      #- {{ .Values.network.mikrotik.address }} # device ip
                      - mikrotik-exporter:9436
                params:
                  module:
                    - gateway
                metrics_path: /metrics
                scrape_interval: 10s
                scrape_timeout: 5s
                honor_labels: true
                relabel_configs:
                  - source_labels: [__address__]
                    target_label: __param_target
                  - source_labels: [__param_target]
                    target_label: instance
                  - target_label: __address__
                    replacement: mikrotik-exporter:9436
          additionalServiceMonitors:
            - name: ingress-nginx-controller
              selector:
                matchLabels:
                  app.kubernetes.io/name: ingress-nginx
              endpoints:
                - port: metrics
            - name: cloudflare-exporter
              selector:
                matchLabels:
                  app.kubernetes.io/name: cloudflare-exporter
              endpoints:
                - port: http
          storageSpec:
            volumeClaimTemplate:
              spec:
                resources:
                  requests:
                    storage: 50Gi
                selector:
                  matchLabels:
                    name: monitoring-data
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              kubernetes.io/tls-acme: "true"
            hosts:
              - prometheus.kube.local
            paths:
              - "/"
            pathType: Prefix
            tls:
              - secretName: default-cert-tls
                hosts:
                  - prometheus.kube.local
        alertmanager:
          storageSpec:
            volumeClaimTemplate:
              spec:
                resources:
                  requests:
                    storage: 50Gi
                selector:
                  matchLabels:
                    name: monitoring-data
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              kubernetes.io/tls-acme: "true"
            hosts:
              - alertmanager.kube.local
            paths:
              - /
            pathType: Prefix
            tls:
              - secretName: default-cert-tls
                hosts:
                  - alertmanager.kube.local
